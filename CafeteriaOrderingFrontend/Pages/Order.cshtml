@page
@model CafeteriaOrderingFrontend.Pages.OrderModel
@{
    ViewData["Title"] = "Orders";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Orders</h1>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert @(Model.IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
            @Model.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        @foreach (var order in Model.Orders)
        {
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Order #@order.OrderId</h5>
                        <div class="d-flex align-items-center">
                            @{
                                var statuses = new[]
                                {
                                    new { Value = "REQUEST_DELIVERY", Text = "Request Delivery" },
                                    new { Value = "CAFETERIA_ACCEPTED", Text = "Cafeteria Accepted" },
                                    new { Value = "CAFETERIA_REJECTED", Text = "Cafeteria Rejected" },
                                    new { Value = "DELIVERY_ACCEPTED", Text = "Delivery Accepted" },
                                    new { Value = "DELIVERY_IN_PROGRESS", Text = "Delivery in Progress" },
                                    new { Value = "COMPLETED", Text = "Completed" },
                                    new { Value = "CANCELED", Text = "Canceled" }
                                };
                            }
                            <select class="form-select form-select-sm me-2" 
                                    onchange='confirmAndUpdateOrderStatus(@order.OrderId, this.value)'
                                    style="width: auto;">
                                <option value="" disabled selected>Update Status</option>
                                @foreach (var status in statuses)
                                {
                                    // Only allow the next status based on the current status (case-insensitive comparison)
                                    if (
                                        (string.Equals(order.Status, "PENDING", StringComparison.OrdinalIgnoreCase) && 
                                            (string.Equals(status.Value, "CAFETERIA_ACCEPTED", StringComparison.OrdinalIgnoreCase) || 
                                             string.Equals(status.Value, "CAFETERIA_REJECTED", StringComparison.OrdinalIgnoreCase))) ||
                                        (string.Equals(order.Status, "CAFETERIA_ACCEPTED", StringComparison.OrdinalIgnoreCase) && 
                                            string.Equals(status.Value, "REQUEST_DELIVERY", StringComparison.OrdinalIgnoreCase)) ||
                                        (string.Equals(order.Status, "REQUEST_DELIVERY", StringComparison.OrdinalIgnoreCase) && 
                                            (string.Equals(status.Value, "DELIVERY_ACCEPTED", StringComparison.OrdinalIgnoreCase) || 
                                             string.Equals(status.Value, "CANCELED", StringComparison.OrdinalIgnoreCase))) ||
                                        (string.Equals(order.Status, "DELIVERY_ACCEPTED", StringComparison.OrdinalIgnoreCase) && 
                                            (string.Equals(status.Value, "DELIVERY_IN_PROGRESS", StringComparison.OrdinalIgnoreCase) || 
                                             string.Equals(status.Value, "CANCELED", StringComparison.OrdinalIgnoreCase))) ||
                                        (string.Equals(order.Status, "DELIVERY_IN_PROGRESS", StringComparison.OrdinalIgnoreCase) && 
                                            string.Equals(status.Value, "COMPLETED", StringComparison.OrdinalIgnoreCase))
                                    )
                                    {
                                        <option value="@status.Value">@status.Text</option>
                                    }
                                }
                            </select>
                            <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Order Date:</strong>
                                <p>@order.OrderDate.ToString("MMM dd, yyyy HH:mm")</p>
                            </div>
                            <div class="col-md-6">
                                <strong>Total Amount:</strong>
                                <p>$@order.TotalAmount.ToString("N2")</p>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Payment Method:</strong>
                                <p>@(order.PaymentMethod ?? "Not specified")</p>
                            </div>

                            <div class="col-md-6">
                                <strong>Delivery Address:</strong>
                                <p>
                                    @(order.Address?.AddressLine ?? "No address")<br />
                                    @(order.Address?.City ?? ""), @(order.Address?.State ?? "") @(order.Address?.ZipCode ?? "")
                                </p>
                            </div>
                        </div>

                        <div class="btn-group w-100">
                            <button class="btn btn-success" onclick="viewOrderItems(@order.OrderId)">
                                <i class="fas fa-list"></i> View Items
                            </button>
                            <button class="btn btn-info" onclick="trackOrder(@order.OrderId)">
                                <i class="fas fa-truck"></i> Track Order
                            </button>
                            <button class="btn btn-primary" onclick="showFeedbackModal(@order.OrderId)">
                                <i class="fas fa-star"></i> Leave Feedback
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Track Order Modal -->
<div class="modal fade" id="trackOrderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Track Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="orderTimeline"></div>
            </div>
        </div>
    </div>
</div>

<!-- Feedback Modal -->
<div class="modal fade" id="feedbackModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Leave Feedback</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="feedbackOrderId" />
                <div class="mb-3">
                    <label class="form-label">Rating</label>
                    <div class="rating">
                        @for (int i = 5; i >= 1; i--)
                        {
                            <input type="radio" name="rating" value="@i" id="rating@i" />
                            <label for="rating@i"><i class="fas fa-star"></i></label>
                        }
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Comment</label>
                    <textarea class="form-control" id="feedbackComment" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitFeedback()">Submit</button>
            </div>
        </div>
    </div>
</div>

<!-- Order Items Modal -->
<div class="modal fade" id="orderItemsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Order Items</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="orderItemsList"></div>
            </div>
        </div>
    </div>
</div>

<div>
    @Html.AntiForgeryToken()
</div>

@section Scripts {
    <script>
        let trackOrderModal;
        let feedbackModal;
        let orderItemsModal;

        document.addEventListener('DOMContentLoaded', function () {
            trackOrderModal = new bootstrap.Modal(document.getElementById('trackOrderModal'));
            feedbackModal = new bootstrap.Modal(document.getElementById('feedbackModal'));
            orderItemsModal = new bootstrap.Modal(document.getElementById('orderItemsModal'));
        });

        async function trackOrder(orderId) {
            try {
                const response = await fetch(`?handler=TrackOrder&orderId=${orderId}`);
                const result = await response.json();

                if (result.success) {
                    const data = JSON.parse(result.content);
                    const timeline = document.getElementById('orderTimeline');
                    
                    // Display order items
                    timeline.innerHTML = `
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${data.map(item => `
                                        <tr>
                                            <td>${item.item?.itemName ?? 'Unknown Item'}</td>
                                            <td>${item.quantity}</td>
                                            <td>$${item.price.toFixed(2)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    `;
                    
                    trackOrderModal.show();
                } else {
                    alert('Failed to track order: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while tracking the order');
            }
        }

        async function updateOrderStatus(orderId, status) {
            try {
                const response = await fetch(`?handler=UpdateOrderStatus&orderId=${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        status: status
                    })
                });

                const result = await response.json();
                if (result.success) {
                    const content = JSON.parse(result.content);
                    alert(content.message || 'Order status updated successfully');
                    window.location.reload();
                } else {
                    alert('Failed to update order status: ' + (result.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while updating the order status');
            }
        }

        async function confirmAndUpdateOrderStatus(orderId, status) {
            const confirmUpdate = confirm(`Are you sure you want to update the order status to "${status}"?`);
            if (!confirmUpdate) {
                // Reload the page to reset the dropdown to its previous value
                window.location.reload();
                return;
            }

            console.log('orderId:', orderId); // Debug log
            console.log('status:', status); // Debug log

            try {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement) {
                    console.error("Anti-forgery token not found!");
                    alert("An error occurred: Anti-forgery token is missing.");
                    return;
                }

                const token = tokenElement.value;

                const response = await fetch(window.location.pathname + "?handler=UpdateOrderStatus", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: `orderId=${orderId}&status=${status}&__RequestVerificationToken=${token}`
                });

                const result = await response.json();
                if (result.success) {
                    alert('Order status updated successfully!');
                    window.location.reload();
                } else {
                    alert('Failed to update order status: ' + (result.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while updating the order status');
            }
        }

        function showFeedbackModal(orderId) {
            document.getElementById('feedbackOrderId').value = orderId;
            feedbackModal.show();
        }

        async function submitFeedback() {
            const orderId = document.getElementById('feedbackOrderId').value;
            const rating = document.querySelector('input[name="rating"]:checked')?.value;
            const comment = document.getElementById('feedbackComment').value;

            if (!rating) {
                alert('Please select a rating');
                return;
            }

            try {
                const response = await fetch('?handler=SubmitFeedback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        orderId: orderId,
                        rating: parseInt(rating),
                        comment: comment
                    })
                });

                const result = await response.json();
                if (result.success) {
                    alert('Thank you for your feedback!');
                    feedbackModal.hide();
                    window.location.reload();
                } else {
                    alert('Failed to submit feedback: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while submitting feedback');
            }
        }

        async function viewOrderItems(orderId) {
            try {
                const response = await fetch(`?handler=GetOrderItems&orderId=${orderId}`);
                const result = await response.json();
                
                console.log('API Response:', result); // Debug log

                if (result.success && Array.isArray(result.items)) {
                    const orderItemsList = document.getElementById('orderItemsList');
                    
                    orderItemsList.innerHTML = `
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Item Name</th>
                                        <th>Quantity</th>
                                        <th>Price per Item</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${result.items.map(item => `
                                        <tr>
                                            <td>${item.itemName}</td>
                                            <td>${item.quantity}</td>
                                            <td>$${(item.price / item.quantity).toFixed(2)}</td>
                                            <td>$${item.price.toFixed(2)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="3" class="text-end"><strong>Order Total:</strong></td>
                                        <td><strong>$${result.items.reduce((sum, item) => sum + item.price, 0).toFixed(2)}</strong></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    `;
                    
                    orderItemsModal.show();
                } else {
                    console.error('Invalid response structure:', result); // Debug log
                    alert('Failed to load order items: ' + (result.message || 'The response format is invalid'));
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while loading order items');
            }
        }
    </script>
}

@section Styles {
    <style>
        .card {
            border-radius: 15px;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .badge {
            padding: 0.5em 1em;
            border-radius: 30px;
            font-weight: 500;
        }

        .timeline {
            position: relative;
            padding: 20px 0;
        }

        .timeline-item {
            position: relative;
            padding-left: 40px;
            margin-bottom: 30px;
        }

        .timeline-marker {
            position: absolute;
            left: 0;
            top: 0;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: #ddd;
            border: 3px solid #fff;
            box-shadow: 0 0 0 3px #ddd;
        }

        .timeline-marker.active {
            background-color: var(--primary-color);
            box-shadow: 0 0 0 3px var(--primary-color);
        }

        .timeline-content {
            padding: 0 20px;
        }

        .timeline-content h3 {
            font-size: 1.1rem;
            margin-bottom: 5px;
        }

        .timeline-content p {
            margin: 0;
            color: #666;
        }

        .rating {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-end;
        }

        .rating input {
            display: none;
        }

        .rating label {
            cursor: pointer;
            font-size: 1.5rem;
            color: #ddd;
            padding: 0 0.1em;
        }

        .rating input:checked ~ label {
            color: #ffd700;
        }

        .rating label:hover,
        .rating label:hover ~ label {
            color: #ffd700;
        }
    </style>
}

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToUpper() switch
        {
            "REQUEST_DELIVERY" => "bg-warning",
            "DELIVERY_ACCEPTED" => "bg-info",
            "DELIVERY_IN_PROGRESS" => "bg-primary",
            "COMPLETED" => "bg-success",
            "CANCELED" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}