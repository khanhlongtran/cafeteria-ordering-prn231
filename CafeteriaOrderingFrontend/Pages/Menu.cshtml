@page
@model CafeteriaOrderingFrontend.Pages.MenuModel
@{
    ViewData["Title"] = "Menu Management";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Menu Management</h1>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert @(Model.IsSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
            @Model.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row mb-4">
        <div class="col-md-3">
            <div class="stats-card" style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));">
                <h3>@Model.Menus.Count</h3>
                <p>Total Menus</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card" style="background: linear-gradient(135deg, var(--secondary-color), var(--accent-color));">
                <h3>@Model.Menus.Sum(m => m.MenuItems.Count)</h3>
                <p>Total Items</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card" style="background: linear-gradient(135deg, var(--accent-color), var(--primary-color));">
                <h3>@Model.Menus.Count(m => m.IsStatus ?? false)</h3>
                <p>Active Menus</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card" style="background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));">
                <h3>@Model.Menus.Sum(m => m.MenuItems.Count(i => i.IsStatus ?? false))</h3>
                <p>Active Items</p>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <button class="btn btn-primary" onclick="showCreateMenuModal()">
                <i class="fas fa-plus"></i> Create New Menu
            </button>
        </div>
    </div>

    <div class="row">
        @foreach (var menu in Model.Menus)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@menu.MenuName</h5>
                        <p class="card-text">@menu.Description</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge @(menu.IsStatus ?? false ? "bg-success" : "bg-danger")">
                                @(menu.IsStatus ?? false ? "Active" : "Inactive")
                            </span>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-outline-info me-2" onclick="viewMenuItems(@menu.MenuId)">
                                    <i class="fas fa-list"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-primary" onclick="showEditMenuModal(@menu.MenuId)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <!-- <button class="btn btn-sm btn-outline-danger" onclick="deleteMenu(@menu.MenuId)">
                                    <i class="fas fa-trash"></i>
                                </button> -->
                                <form method="post" onsubmit="return confirmDelete()">
                                    <input type="hidden" name="menuId" value="@menu.MenuId" />
                                    <button class="btn btn-sm btn-outline-danger" type="submit" asp-page-handler="DeleteMenu" class="btn btn-danger">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add this right after the container-fluid div -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <i class="fas fa-check-circle me-2"></i>
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
        </div>
    </div>
</div>

<!-- Create Menu Modal -->
<div class="modal fade" id="createMenuModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Menu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="SaveMenu">
                <div class="modal-body">
                    <input type="hidden" name="menuId" value="0" />
                    <div class="mb-3">
                        <label class="form-label">Menu Name</label>
                        <input type="text" class="form-control" name="menuName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="isStatus" value="true" checked />
                            <label class="form-check-label">Active</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Menu Modal -->
<div class="modal fade" id="editMenuModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Menu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="SaveMenu">
                <div class="modal-body">
                    <input type="hidden" name="menuId" id="editMenuId" />
                    <div class="mb-3">
                        <label class="form-label">Menu Name</label>
                        <input type="text" class="form-control" name="menuName" id="editMenuName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" id="editMenuDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="isStatus" value="true" id="editMenuStatus" />
                            <label class="form-check-label">Active</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Menu Items Modal -->
<div class="modal fade" id="menuItemsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Menu Items</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <button class="btn btn-primary" onclick="showCreateMenuItemModal()">
                        <i class="fas fa-plus"></i> Add New Item
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Price</th>
                                <th>Type</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="menuItemsTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Menu Item Modal -->
<div class="modal fade" id="createMenuItemModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="SaveMenuItem">
                <div class="modal-body">
                    <input type="hidden" name="itemId" value="0" />
                    <input type="hidden" name="menuId" id="createItemMenuId" />
                    <div class="mb-3">
                        <label class="form-label">Item Name</label>
                        <input type="text" class="form-control" name="itemName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" name="price" step="0.01" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Item Type</label>
                        <select class="form-select" name="itemType" required>
                            <option value="Main Course">Main Course</option>
                            <option value="Appetizer">Appetizer</option>
                            <option value="Side Dish">Side Dish</option>
                            <option value="Dessert">Dessert</option>
                            <option value="Beverage">Beverage</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="isStatus" value="true" checked />
                            <input type="hidden" name="isStatus" value="false" />
                            <label class="form-check-label">Active</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Menu Item Modal -->
<div class="modal fade" id="editMenuItemModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="SaveMenuItem">
                <div class="modal-body">
                    <input type="hidden" name="itemId" id="editItemId" />
                    <input type="hidden" name="menuId" id="editItemMenuId" />
                    <div class="mb-3">
                        <label class="form-label">Item Name</label>
                        <input type="text" class="form-control" name="itemName" id="editItemName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" id="editItemDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" name="price" id="editItemPrice" step="0.01" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Item Type</label>
                        <select class="form-select" name="itemType" id="editItemType" required>
                            <option value="Main Course">Main Course</option>
                            <option value="Appetizer">Appetizer</option>
                            <option value="Side Dish">Side Dish</option>
                            <option value="Dessert">Dessert</option>
                            <option value="Beverage">Beverage</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="isStatus" id="editItemStatus" value="true" />
                            <input type="hidden" name="isStatus" value="false" />
                            <label class="form-check-label">Active</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let createMenuModal;
        let editMenuModal;
        let menuItemsModal;
        let createMenuItemModal;
        let editMenuItemModal;
        let successToast;

        document.addEventListener('DOMContentLoaded', function () {
            createMenuModal = new bootstrap.Modal(document.getElementById('createMenuModal'));
            editMenuModal = new bootstrap.Modal(document.getElementById('editMenuModal'));
            menuItemsModal = new bootstrap.Modal(document.getElementById('menuItemsModal'));
            createMenuItemModal = new bootstrap.Modal(document.getElementById('createMenuItemModal'));
            editMenuItemModal = new bootstrap.Modal(document.getElementById('editMenuItemModal'));
            successToast = new bootstrap.Toast(document.getElementById('successToast'));

            // Check for success message in URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const message = urlParams.get('message');
            if (message) {
                showSuccessToast(decodeURIComponent(message));
            }
        });

        function showSuccessToast(message) {
            document.getElementById('toastMessage').textContent = message;
            successToast.show();
        }

        function showCreateMenuModal() {
            createMenuModal.show();
        }

        function confirmDelete() {
            return confirm("Are you sure you want to delete this menu?");
        }

        async function showEditMenuModal(menuId) {
            try {
                const response = await fetch(`?handler=GetMenu&menuId=${menuId}`);
                if (response.ok) {
                    const menu = await response.json();
                    document.getElementById('editMenuId').value = menu.menuId;
                    document.getElementById('editMenuName').value = menu.menuName;
                    document.getElementById('editMenuDescription').value = menu.description || '';
                    document.getElementById('editMenuStatus').checked = menu.isStatus;
                    editMenuModal.show();
                } else {
                    alert('Failed to load menu details');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while loading menu details');
            }
        }

        async function deleteMenu(menuId) {
            if (!confirm("Are you sure you want to delete this menu?")) return;

            try {
                const response = await fetch(window.location.pathname + "?handler=DeleteMenu", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: `menuId=${menuId}`
                });

                if (response.ok) {
                    alert("Menu deleted successfully!");
                    document.getElementById(`menu-${menuId}`).remove(); // Remove row from table
                } else {
                    const errorText = await response.text();
                    alert("Failed to delete menu: " + errorText);
                }
            } catch (error) {
                console.log("Error:", error);
                alert("An error occurred while deleting the menu.");
            }
                
                // try {
                //     const form = document.createElement('form');
                //     form.method = 'POST';
                //     form.action = window.location.pathname;
                //     form.innerHTML = `
                //         <input type="hidden" name="handler" value="OnPostDeleteMenu" />
                //         <input type="hidden" name="menuId" value="${menuId}" />
                //     `;
                //     document.body.appendChild(form);
                //     form.submit();
                // } catch (error) {
                //     console.error('Error:', error);
                //     alert('An error occurred while deactivating the menu');
                // }
        }

        function viewMenuItems(menuId) {
            fetch(`?handler=GetMenuItems&menuId=${menuId}`)
                .then(async response => {
                    try {
                        const data = await response.json();
                        return data;
                    } catch (error) {
                        return []; // Return empty array if response cannot be parsed as JSON
                    }
                })
                .then(items => {
                    const tbody = document.getElementById('menuItemsTableBody');
                    tbody.innerHTML = '';
                    
                    if (items && items.length > 0) {
                        items.forEach(item => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${item.itemName}</td>
                                <td>${item.description || ''}</td>
                                <td>$${item.price.toFixed(2)}</td>
                                <td>${item.itemType}</td>
                                <td>
                                    <span class="badge ${item.isStatus ? 'bg-success' : 'bg-danger'}">
                                        ${item.isStatus ? 'Active' : 'Inactive'}
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" onclick="showEditMenuItemModal(${item.itemId})">
                                        <i class="fas fa-edit"></i>
                                    </button>

                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteMenuItem(${item.itemId})">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            `;
                            tbody.appendChild(row);
                        });
                    } else {
                        // Add a "no items" message row
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td colspan="6" class="text-center">No menu items found. Click "Add New Item" to create one.</td>
                        `;
                        tbody.appendChild(row);
                    }

                    document.getElementById('createItemMenuId').value = menuId;
                    menuItemsModal.show();
                })
                .catch(error => {
                    // Even if there's an error, show the modal with empty table
                    const tbody = document.getElementById('menuItemsTableBody');
                    tbody.innerHTML = '';
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td colspan="6" class="text-center">No menu items found. Click "Add New Item" to create one.</td>
                    `;
                    tbody.appendChild(row);
                    document.getElementById('createItemMenuId').value = menuId;
                    menuItemsModal.show();
                    
                    console.error('Error:', error);
                });
        }

        function showCreateMenuItemModal() {
            createMenuItemModal.show();
        }

        function showEditMenuItemModal(itemId) {
            fetch(`?handler=GetMenuItem&itemId=${itemId}`)
                .then(response => response.json())
                .then(item => {
                    document.getElementById('editItemId').value = item.itemId;
                    document.getElementById('editItemMenuId').value = item.menuId;
                    document.getElementById('editItemName').value = item.itemName;
                    document.getElementById('editItemDescription').value = item.description || '';
                    document.getElementById('editItemPrice').value = item.price;
                    document.getElementById('editItemType').value = item.itemType;
                    document.getElementById('editItemStatus').checked = item.isStatus;
                    editMenuItemModal.show();
                })
                .catch(error => {
                    console.error('Error fetching menu item:', error);
                    alert('Failed to load menu item details');
                });
        }

        async function deleteMenuItem(itemId) {
            if (confirm("Are you sure you want to delete this menu item?")) {
                try {
                    const response = await fetch(`?handler=DeleteMenuItem&itemId=${itemId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: `itemId=${itemId}`
                    });

                    const result = await response.json();
                    if (result.success) {
                        alert("Menu item deleted successfully!");
                        viewMenuItems(); // Reload the list after deletion
                    } else {
                        alert("Failed to delete menu item: " + result.message);
                    }
                } catch (error) {
                    console.error("Error:", error);
                    alert("An error occurred while deleting the menu item.");
                }
            }
        }
    </script>
}

@section Styles {
    <style>
        .card {
            border-radius: 15px;
            overflow: hidden;
        }

        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }

        .badge {
            padding: 0.5em 1em;
            border-radius: 30px;
            font-weight: 500;
        }

        .modal-content {
            border-radius: 15px;
        }

        .form-control {
            border-radius: 8px;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(255, 71, 87, 0.25);
        }

        .spinner-border {
            width: 1rem;
            height: 1rem;
            margin-right: 0.5rem;
        }

        .toast {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .toast-header {
            border-radius: 8px 8px 0 0;
        }

        .toast-body {
            padding: 1rem;
        }
    </style>
}